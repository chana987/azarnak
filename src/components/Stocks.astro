---
import "../styles/stocks.css";
import StockCard from "./StockCard.astro";
import { getTranslations, getLocaleFromRequest } from '../i18n';

const locale = getLocaleFromRequest(Astro.request);
const { t } = getTranslations(locale);

interface StockCard {
  Company: string;
  "Hebrew Name": string;
  Exchange: string;
  Ticker: string;
  "Official Name": string;
  "Today's Price": string;
  Currency: string;
  "Normalized to ILS": string;
}

let stocks: StockCard[] = [];
let error: string | null = null;
let needsAuth = false;

// Check if user is authenticated by checking cookies
const hasAuth = Astro.cookies.has("google_access_token");

if (hasAuth) {
  try {
    const response = await fetch(`${Astro.url.origin}/api/stocks`, {
      headers: {
        Cookie: Astro.request.headers.get("Cookie") || "",
      },
    });

    if (response.ok) {
      stocks = await response.json();
    } else {
      const errorData = await response.json();
      error = errorData.error || t('errors.failedToFetchStocks');
      needsAuth = errorData.needsAuth || false;
    }
  } catch (e) {
    error = e instanceof Error ? e.message : t('errors.failedToFetchStocks');
  }
} else {
  needsAuth = true;
}
---

<div id="container">
  <main>
    <section id="stocks-section">
      <div class="header">
        <h1>{t('stock.portfolio')}</h1>
        {
          hasAuth && (
            <a href="/api/auth/logout" class="logout-btn">
              {t('common.logout')}
            </a>
          )
        }
      </div>

      {
        needsAuth ? (
          <div class="auth-prompt">
            <h2>{t('auth.signInTitle')}</h2>
            <p>
              {t('auth.signInDescription')}
            </p>
            <a href="/api/auth/login" class="login-btn">
              <svg viewBox="0 0 24 24" width="24" height="24">
                <path
                  fill="currentColor"
                  d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                />
                <path
                  fill="currentColor"
                  d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                />
                <path
                  fill="currentColor"
                  d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                />
                <path
                  fill="currentColor"
                  d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                />
              </svg>
              {t('auth.signInButton')}
            </a>
            <p class="help-text">
              {t('auth.signInHelp')}
            </p>
          </div>
        ) : error ? (
          <div class="error">
            <p>
              <strong>{t('common.error')}</strong> {error}
            </p>
            <p class="help-text">
              {t('auth.pleaseSignInAgain')}
            </p>
          </div>
        ) : stocks.length === 0 ? (
          <div class="loading">
            <p>{t('common.loading')}</p>
          </div>
        ) : (
          <div class="stocks-grid">
            {stocks.map((stock) => (
              <StockCard
                company={stock.Company}
                hebrewName={stock["Hebrew Name"]}
                exchange={stock.Exchange}
                ticker={stock.Ticker}
                officialName={stock["Official Name"]}
                todaysPrice={stock["Today's Price"]}
                currency={stock.Currency}
                normalizedToILS={stock["Normalized to ILS"]}
                locale={locale}
              />
            ))}
          </div>
        )
      }
    </section>
  </main>
</div>
